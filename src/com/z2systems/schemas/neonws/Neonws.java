package com.z2systems.schemas.neonws;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.11
 * 2017-05-24T17:30:59.803Z
 * Generated source version: 3.1.11
 * 
 */
@WebServiceClient(name = "Neonws", 
                  wsdlLocation = "file:../wsdl/definitions.wsdl",
                  targetNamespace = "http://www.z2systems.com/schemas/neonws/") 
public class Neonws extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.z2systems.com/schemas/neonws/", "Neonws");
    public final static QName DonationPort = new QName("http://www.z2systems.com/schemas/neonws/", "DonationPort");
    public final static QName MembershipPort = new QName("http://www.z2systems.com/schemas/neonws/", "MembershipPort");
    public final static QName AccountPort = new QName("http://www.z2systems.com/schemas/neonws/", "AccountPort");
    public final static QName EventPort = new QName("http://www.z2systems.com/schemas/neonws/", "EventPort");
    public final static QName StorePort = new QName("http://www.z2systems.com/schemas/neonws/", "StorePort");
    public final static QName CommonPort = new QName("http://www.z2systems.com/schemas/neonws/", "CommonPort");
    static {
        URL url = null;
        try {
            url = new URL("file:../wsdl/definitions.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Neonws.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:../wsdl/definitions.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Neonws(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Neonws(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Neonws() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public Neonws(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public Neonws(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public Neonws(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns DonationService
     */
    @WebEndpoint(name = "DonationPort")
    public DonationService getDonationPort() {
        return super.getPort(DonationPort, DonationService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DonationService
     */
    @WebEndpoint(name = "DonationPort")
    public DonationService getDonationPort(WebServiceFeature... features) {
        return super.getPort(DonationPort, DonationService.class, features);
    }


    /**
     *
     * @return
     *     returns MembershipService
     */
    @WebEndpoint(name = "MembershipPort")
    public MembershipService getMembershipPort() {
        return super.getPort(MembershipPort, MembershipService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MembershipService
     */
    @WebEndpoint(name = "MembershipPort")
    public MembershipService getMembershipPort(WebServiceFeature... features) {
        return super.getPort(MembershipPort, MembershipService.class, features);
    }


    /**
     *
     * @return
     *     returns AccountService
     */
    @WebEndpoint(name = "AccountPort")
    public AccountService getAccountPort() {
        return super.getPort(AccountPort, AccountService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AccountService
     */
    @WebEndpoint(name = "AccountPort")
    public AccountService getAccountPort(WebServiceFeature... features) {
        return super.getPort(AccountPort, AccountService.class, features);
    }


    /**
     *
     * @return
     *     returns EventService
     */
    @WebEndpoint(name = "EventPort")
    public EventService getEventPort() {
        return super.getPort(EventPort, EventService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns EventService
     */
    @WebEndpoint(name = "EventPort")
    public EventService getEventPort(WebServiceFeature... features) {
        return super.getPort(EventPort, EventService.class, features);
    }


    /**
     *
     * @return
     *     returns StoreService
     */
    @WebEndpoint(name = "StorePort")
    public StoreService getStorePort() {
        return super.getPort(StorePort, StoreService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns StoreService
     */
    @WebEndpoint(name = "StorePort")
    public StoreService getStorePort(WebServiceFeature... features) {
        return super.getPort(StorePort, StoreService.class, features);
    }


    /**
     *
     * @return
     *     returns CommonService
     */
    @WebEndpoint(name = "CommonPort")
    public CommonService getCommonPort() {
        return super.getPort(CommonPort, CommonService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CommonService
     */
    @WebEndpoint(name = "CommonPort")
    public CommonService getCommonPort(WebServiceFeature... features) {
        return super.getPort(CommonPort, CommonService.class, features);
    }

}
